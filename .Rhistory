Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
error.Math
errores.cv.Math
df.errores.cv <- data.frame(Error=c(as.vector(errores.cv.Math), error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,
as.vector(errores.cv.Por), error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
errores.cv.Math
errores.cv.Math
as.vector(errores.cv.Math)
error.cv.Math.Lasso
Math.loo.ridge
errores.cv.Math <- as.vector(errores.cv.Math)
errores.cv.Por <- as.vector(errores.cv.Por)
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,
errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática','Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet','Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
#Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática','Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
#Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet','Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
)
c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN)
errores.total.cv <- c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN)
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN)
#Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática','Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
#Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet','Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
)
errores.cv.Math
error.cv.Math.Lasso
Math.loo.ridge
Math.loo.EN
Math.loo.ridge
paste("Error (mse) de LooCV:", Math.loo.ridge)
X <- model.matrix(G3~., data = Math)[, -1]
Y <- Math$G3
cv_output <- cv.glmnet(X, Y, alpha = 0, type.measure = "mse",
grouped = FALSE, nfolds = nrow(Math))
best_lam <- cv_output$lambda.min
Math.loo.ridge <- c()
for (i in 1 : nrow(Math)) {
fit <- glmnet(X[-i,], Y[-i], alpha = 0, lambda = best_lam)
pred_train <- predict(cv_output, s = best_lam , newx = X[i, , drop = F])
Math.loo.ridge[i] <- mean((pred_train - Y[i])^2)
}
Math.loo.ridge <- mean(Math.loo.ridge)
paste("Error (mse) de LooCV:", Math.loo.ridge)
Por.loo.ridge
df.errores.cv <- data.frame(Error=c(errores.cv.Math, error.cv.Math.Lasso ,Math.loo.ridge, Math.loo.EN,
errores.cv.Por, error.cv.Por.Lasso, Por.loo.ridge, Por.loo.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
# Plot
g14 <- ggplot(data = df.errores.cv, mapping = aes(x = Dataset, y = Error, fill = Método)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_npg()+
#scale_fill_manual(values = getPalette(nrow(df.errores.cv)))+
theme_light()+
theme_minimal()
print(g14 + mynamesthemev2 + labs( title= "Resultados - CV",
y="ECM",
x = "Datasets"))
save.image("E:/Bruno/Favaloro/4 Año/2do Cuatrimestre/ICD/ProyectoFinal/Student-ICD/TPFinal-Students-Finalizado.RData")
library(ggplot2)
library(GGally)
library(stats)
library(FactoMineR)
library(factoextra)
library(leaps)
library(caTools)
library(RColorBrewer)
library(glmnet)
library(ISLR)
library(coefplot)
library(tidyverse)
library(skimr)
# library(DataExplorer)
library(dplyr)
library(broom)
library(wesanderson)
library("ggsci")
#setwd("E:/Documentos/ING_BIOMEDICA/Cuarto Aï¿½o/Segundo Cuatrimestre/Introducciï¿½n a la Ciencia de Datos/Student-ICD")
setwd("E:/Bruno/Favaloro/4 Año/2do Cuatrimestre/ICD/ProyectoFinal/Student-ICD")
mynamestheme <- theme(plot.title = element_text(family = "Helvetica", face = "bold", size = (15)),
legend.title = element_text(colour = "gray28",  face = "bold.italic", family = "Helvetica"),
legend.text = element_text(face = "italic", colour="gray28",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (11), colour = "steelblue4"),
axis.text = element_text(family = "Courier", colour = "cornflowerblue", size = (11)),
plot.tag = element_text(family = "Helvetica", face = "bold", size = (11)),
axis.text.x=element_blank(),
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
#legend.position = c(.95, .95),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(6, 6, 6, 6)
)
mynamesthemev2 <- theme(plot.title = element_text(family = "Helvetica", face = "bold", size = (15)),
legend.title = element_text(colour = "gray28",  face = "bold.italic", family = "Helvetica"),
legend.text = element_text(face = "italic", colour="gray28",family = "Helvetica"),
axis.title = element_text(family = "Helvetica", size = (11), colour = "steelblue4"),
axis.text = element_text(family = "Courier", colour = "cornflowerblue", size = (11)),
plot.tag = element_text(family = "Helvetica", face = "bold", size = (11)),
#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
#legend.position = c(.95, .95),
#legend.justification = c("right", "top"),
#legend.box.just = "right",
#legend.margin = margin(6, 6, 6, 6)
)
error_prediccion <- function(predicciones, dataset){
for (i in 1:length(predicciones)) {
if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
predicciones[i] <- floor(predicciones[i])
}
else
predicciones[i] <- ceiling(predicciones[i])
}
mse <- mean((dataset$G3 - predicciones)^2)
return(mse)
}
error_prediccionv2 <- function(predicciones, dataset){
for (i in 1:length(predicciones)) {
if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
predicciones[i] <- floor(predicciones[i])
}
else
predicciones[i] <- ceiling(predicciones[i])
}
mse <- mean((dataset - predicciones)^2)
return(mse)
}
Math
load("E:/Bruno/Favaloro/4 Año/2do Cuatrimestre/ICD/ProyectoFinal/Student-ICD/TPFinal-Students-Finalizado.RData")
Math.lineal.forward
summary(Math.lineal.forward)$r2
summary(Math.lineal.forward)
names(Math.lineal.forward)
names(summary(Math.lineal.forward))
summary(Math.lineal.forward)$r.squared
r2.Math <- c(summary(Math.lineal.forward)$r.squared,
summary(Math.lineal.backward)$r.squared,
summary(Math.lineal.hybrid)$r.squared)
r2.Math
r2.Por <- c(summary(Por.lineal.forward)$r.squared,
summary(Por.lineal.backward)$r.squared,
summary(Por.lineal.hybrid)$r.squared)
r2.Por
error_prediccionv2 <- function(predicciones, dataset){
for (i in 1:length(predicciones)) {
if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
predicciones[i] <- floor(predicciones[i])
}
else
predicciones[i] <- ceiling(predicciones[i])
}
mse <- mean((dataset - predicciones)^2)
return(mse)
}
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10,
type.measure = "mse")
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
predicciones_train <- predict(cv_output, s = cv_output$lambda.min , newx = x_train)
Math_training_mse <- error_prediccionv2(predicciones_train,y_train)
paste("Error (mse) de entrenamiento:", Math_training_mse)
predicciones_test <- predict(cv_output, s = cv_output$lambda.min , newx = x_test)
Math_test_mse <- error_prediccionv2(predicciones_test,y_test)
paste("Error (mse) de test:", Math_test_mse)
rss.Math.Lasso <- sum((predicciones_test - y_test) ^ 2)
tss.Math.Lasso <- sum((predicciones_test - mean(predicciones_test)) ^ 2)
rsq.Math.Lasso <- 1 - rss.Math.Lasso/tss.Math.Lasso
rsq.Math.Lasso
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
Por.train = subset(Por, sample == TRUE)
Por.test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = Por.train)[, -1]
y_train <- Por.train$G3
x_test <- model.matrix(G3~., data = Por.test)[, -1]
y_test <- Por.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10,
type.measure = "mse")
predicciones_train <- predict(cv_output, s = cv_output$lambda.min , newx = x_train)
Por_training_mse <- error_prediccionv2(predicciones_train,y_train)
paste("Error (mse) de entrenamiento:", Por_training_mse)
predicciones_test <- predict(cv_output, s = cv_output$lambda.min , newx = x_test)
Por_test_mse <- error_prediccionv2(predicciones_test,y_test)
paste("Error (mse) de test:", Por_test_mse)
rss.Por.Lasso <- sum((predicciones_test - y_test) ^ 2)
tss.Por.Lasso <- sum((predicciones_test - mean(predicciones_test)) ^ 2)
rsq.Por.Lasso <- 1 - rss.Por.Lasso/tss.Por.Lasso
rsq.Por.Lasso
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 0, type.measure = "mse")
predicciones_train <- predict(cv_output, s = cv_output$lambda.min , newx = x_train)
Math_training_mse_ridge <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Math_training_mse_ridge)
predicciones_test <- predict(cv_output, s = cv_output$lambda.min , newx = x_test)
Math_test_mse_ridge <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Math_test_mse_ridge)
rss.Math.Ridge <- sum((predicciones_test - y_test) ^ 2)
tss.Math.Ridge<- sum((predicciones_test - mean(predicciones_test)) ^ 2)
rsq.Math.Ridge <- 1 - rss.Math.Ridge/tss.Math.Ridge
rsq.Math.Ridge
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
Por.train = subset(Por, sample == TRUE)
Por.test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = Por.train)[, -1]
y_train <- Por.train$G3
x_test <- model.matrix(G3~., data = Por.test)[, -1]
y_test <- Por.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 0, nfolds = 10,
type.measure = "mse")
predicciones_train <- predict(cv_output, s = cv_output$lambda.min , newx = x_train)
Por_training_mse_ridge <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Por_training_mse_ridge)
predicciones_test <- predict(cv_output, s = cv_output$lambda.min , newx = x_test)
Por_test_mse_ridge <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Por_test_mse_ridge)
rss.Por.Ridge <- sum((predicciones_test - y_test) ^ 2)
tss.Por.Ridge<- sum((predicciones_test - mean(predicciones_test)) ^ 2)
rsq.Por.Ridge <- 1 - rss.Por.Ridge/tss.Por.Ridge
rsq.Por.Ridge
results.min$mse
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
list.of.fits <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
list.of.fits[[fit.name]] <-
cv.glmnet(x_train, y_train, type.measure = 'mse',
alpha = i/10, family = 'gaussian')
}
results <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.1se,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name, R2 = rsq )
results.1se <- rbind(results, temp)
}
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.min,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name,  R2 = rsq )
results.min <- rbind(results, temp)
}
results.min
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
list.of.fits <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
list.of.fits[[fit.name]] <-
cv.glmnet(x_train, y_train, type.measure = 'mse',
alpha = i/10, family = 'gaussian')
}
results <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.1se,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name, R2 = rsq )
results.1se <- rbind(results, temp)
}
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.min,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name,  R2 = rsq )
results.min <- rbind(results, temp)
}
Math.test.net <- results.min$mse
Math.test.net
rsq.Math.EN <- results.min$R2
rsq.Math.EN
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
Por.train = subset(Por, sample == TRUE)
Por.test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = Por.train)[, -1]
y_train <- Por.train$G3
x_test <- model.matrix(G3~., data = Por.test)[, -1]
y_test <- Por.test$G3
list.of.fits <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
list.of.fits[[fit.name]] <-
cv.glmnet(x_train, y_train, type.measure = 'mse',
alpha = i/10, family = 'gaussian')
}
results <- list()
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.1se,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name,  R2 = rsq )
results.1se <- rbind(results, temp)
}
for (i in 1:10) {
fit.name <- paste0('alpha', i/10)
EN.pred.mult <- predict(list.of.fits[[fit.name]],
s = list.of.fits[[fit.name]]$lambda.min,
newx = x_test)
em.EN.mult <- mean((y_test - EN.pred.mult)^2)
rss <- sum((EN.pred.mult - y_test) ^ 2)
tss<- sum((EN.pred.mult - mean(EN.pred.mult)) ^ 2)
rsq <- 1 - rss/tss
temp <- data.frame(alpha = i/10, mse = em.EN.mult, fit.name = fit.name,  R2 = rsq )
results.min <- rbind(results, temp)
}
Por.test.net <- results.min$mse
Por.test.net
rsq.Por.EN <- results.min$R2
rsq.Por.EN
r2.Math <- c(summary(Math.lineal.forward)$r.squared,
summary(Math.lineal.backward)$r.squared,
summary(Math.lineal.hybrid)$r.squared)
r2.Por <- c(summary(Por.lineal.forward)$r.squared,
summary(Por.lineal.backward)$r.squared,
summary(Por.lineal.hybrid)$r.squared)
df.r2 <- data.frame(R2=c(r2.Math, rsq.Math.Lasso ,rsq.Math.Ridge, rsq.Math.EN,
r2.Por, rsq.Por.Lasso, rsq.Por.Ridge, rsq.Por.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
# Plot
g15 <- ggplot(data = df.r2, mapping = aes(x = Dataset, y = R2, fill = Método)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_npg()+
#scale_fill_manual(values = getPalette(nrow(df.errores.cv)))+
theme_light()+
theme_minimal()
print(g14 + mynamesthemev2 + labs( title= "Resultados",
y="R2",
x = "Datasets"))
print(g13 + mynamesthemev2 + labs( title= "Resultados - ECM",
y="ECM",
x = "Datasets"))
Math_test_mse_ridge
print(g13 + mynamesthemev2 + labs(title= "Resultados - ECM",
y="ECM",
x = "Datasets"))
Math_test_mse_ridge
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 0, type.measure = "mse")
predicciones_train <- predict(cv_output, s = cv_output$lambda.min , newx = x_train)
Math_training_mse_ridge <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Math_training_mse_ridge)
predicciones_test <- predict(cv_output, s = cv_output$lambda.min , newx = x_test)
Math_test_mse_ridge <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Math_test_mse_ridge)
r2.Math <- c(summary(Math.lineal.forward)$r.squared,
summary(Math.lineal.backward)$r.squared,
summary(Math.lineal.hybrid)$r.squared)
r2.Por <- c(summary(Por.lineal.forward)$r.squared,
summary(Por.lineal.backward)$r.squared,
summary(Por.lineal.hybrid)$r.squared)
df.r2 <- data.frame(R2=c(r2.Math, rsq.Math.Lasso ,rsq.Math.Ridge, rsq.Math.EN,
r2.Por, rsq.Por.Lasso, rsq.Por.Ridge, rsq.Por.EN),
Dataset=c('Matemática','Matemática','Matemática','Matemática','Matemática','Matemática',
'Portugués','Portugués','Portugués','Portugués','Portugués','Portugués'),
Método=c('Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet',
'Forward','Backward','Hybrid','Lasso','Ridge','ElasticNet'))
# Plot
g15 <- ggplot(data = df.r2, mapping = aes(x = Dataset, y = R2, fill = Método)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_npg()+
#scale_fill_manual(values = getPalette(nrow(df.errores.cv)))+
theme_light()+
theme_minimal()
print(g14 + mynamesthemev2 + labs( title= "Resultados - R2",
y="R2",
x = "Datasets"))
g3 <- ggplot(data = df.Math.hybrid, mapping = aes(x = Variables, y = Frecuencia, fill = Variables)) +
geom_bar(stat = "identity")+
geom_text(aes(label = Frecuencia), position = position_stack(vjust= 0.5),
colour = "black", size = 3)+
scale_fill_manual(values = getPalette(nrow(df.Math.hybrid)))+
theme_light()+
theme_minimal()
print(g3 + mynamestheme + labs( title= "Matemática - Hybrid", y="Frecuencia",
x = "Variables"))
print(g2 + mynamestheme + labs( title= "Matemática - Backward", y="Frecuencia",
x = "Variables"))
print(g3 + mynamestheme + labs( title= "Matemática - Hybrid", y="Frecuencia",
x = "Variables"))
getPalette
g2 <- ggplot(data = df.Math.backward, mapping = aes(x = Variables, y = Frecuencia, fill = Variables)) +
geom_bar(stat = "identity")+
geom_text(aes(label = Frecuencia), position = position_stack(vjust= 0.5),
colour = "black", size = 3)+
scale_fill_manual(values = getPalette(nrow(df.Math.backward)))+
theme_light()+
theme_minimal()
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# Plot
g1 <- ggplot(data = df.Math.forward, mapping = aes(x = Variables, y = Frecuencia, fill = Variables)) +
geom_bar(stat = "identity")+
geom_text(aes(label = Frecuencia), position = position_stack(vjust= 0.5),
colour = "black", size = 3)+
scale_fill_manual(values = getPalette(nrow(df.Math.forward)))+
theme_light()+
theme_minimal()
g2 <- ggplot(data = df.Math.backward, mapping = aes(x = Variables, y = Frecuencia, fill = Variables)) +
geom_bar(stat = "identity")+
geom_text(aes(label = Frecuencia), position = position_stack(vjust= 0.5),
colour = "black", size = 3)+
scale_fill_manual(values = getPalette(nrow(df.Math.backward)))+
theme_light()+
theme_minimal()
g3 <- ggplot(data = df.Math.hybrid, mapping = aes(x = Variables, y = Frecuencia, fill = Variables)) +
geom_bar(stat = "identity")+
geom_text(aes(label = Frecuencia), position = position_stack(vjust= 0.5),
colour = "black", size = 3)+
scale_fill_manual(values = getPalette(nrow(df.Math.hybrid)))+
theme_light()+
theme_minimal()
print(g1 + mynamestheme + labs( title= "Matemática - Forward", y="Frecuencia",
x = "Variables"))
print(g2 + mynamestheme + labs( title= "Matemática - Backward", y="Frecuencia",
x = "Variables"))
print(g3 + mynamestheme + labs( title= "Matemática - Hybrid", y="Frecuencia",
x = "Variables"))
print(g1 + mynamestheme + labs( title= "Matemática - Forward", y="Frecuencia",
x = "Variables"))
print(g2 + mynamestheme + labs( title= "Matemática - Backward", y="Frecuencia",
x = "Variables"))
