Por.t <- Por[-i,]
Por.lineal.forward <- lm(G3~absences+activities+age+famrel+Fjob+G1+G2,data=Por.t)
Por.lineal.backward <- lm(G3~absences+activities+age+famrel+G1+G2,data=Por.t)
Por.lineal.stepwise <- lm(G3~absences+activities+age+famrel+Fjob+G1+G2+Walc,data=Por.t)
Por.pred.forward <- predict(Por.lineal.forward, newdata = Por.t)
Por.pred.backward <- predict(Por.lineal.backward, newdata = Por.t)
Por.pred.stepwise <- predict(Por.lineal.stepwise, newdata = Por.t)
errores.cv.Por[i,] <- c(error_prediccion(Por.lineal.forward,Por.t),
error_prediccion(Por.lineal.backward,Por.t),
error_prediccion(Por.lineal.stepwise,Por.t))
}
View(Por.train)
error_prediccion <- function(predicciones, dataset){
# for (i in 1:length(predicciones)) {
#   if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
#     predicciones[i] <- floor(predicciones[i])
#   }
#   else
#     predicciones[i] <- ceiling(predicciones[i])
# }
mse <- mean((dataset$G3 - predicciones)^2)
return(mse)
}
errores.cv.Por <- matrix(0, nrow=nrow(Por), ncol=3)
colnames(errores.cv.Por) <- c('forward','backward','stepwise')
for(i in 1:nrow(Por)){
Por.t <- Por[-i,]
Por.lineal.forward <- lm(G3~absences+failures+G1+G2+reason+Mjob+sex+traveltime,data=Por.t)
Por.lineal.backward <- lm(G3~failures+G1+G2+reason+school+sex+traveltime,data=Por.t)
Por.lineal.stepwise <- lm(G3~failures+G1+G2+Mjob+reason+sex+traveltime,data=Por.t)
Por.pred.forward <- predict(Por.lineal.forward, newdata = Por.t)
Por.pred.backward <- predict(Por.lineal.backward, newdata = Por.t)
Por.pred.stepwise <- predict(Por.lineal.stepwise, newdata = Por.t)
errores.cv.Por[i,] <- c(error_prediccion(Por.lineal.forward,Por.t),
error_prediccion(Por.lineal.backward,Por.t),
error_prediccion(Por.lineal.stepwise,Por.t))
}
errores.cv.Por <- apply(errores.cv.Por, 2, mean)
errores.cv.Por
error_prediccion <- function(predicciones, dataset){
# for (i in 1:length(predicciones)) {
#   if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
#     predicciones[i] <- floor(predicciones[i])
#   }
#   else
#     predicciones[i] <- ceiling(predicciones[i])
# }
mse <- mean((dataset$G3 - predicciones)^2)
return(mse)
}
errores.cv.Por <- matrix(0, nrow=nrow(Por), ncol=3)
colnames(errores.cv.Por) <- c('forward','backward','stepwise')
for(i in 1:nrow(Por)){
Por.t <- Por[-i,]
Por.lineal.forward <- lm(G3~absences+failures+G1+G2+reason+Mjob+sex+traveltime,data=Por.t)
Por.lineal.backward <- lm(G3~failures+G1+G2+reason+school+sex+traveltime,data=Por.t)
Por.lineal.stepwise <- lm(G3~failures+G1+G2+Mjob+reason+sex+traveltime,data=Por.t)
Por.pred.forward <- predict(Por.lineal.forward, newdata = Por.t)
Por.pred.backward <- predict(Por.lineal.backward, newdata = Por.t)
Por.pred.stepwise <- predict(Por.lineal.stepwise, newdata = Por.t)
errores.cv.Por[i,] <- c(error_prediccion(Por.lineal.forward,Por.t),
error_prediccion(Por.lineal.backward,Por.t),
error_prediccion(Por.lineal.stepwise,Por.t))
}
for(i in 1:nrow(Por)){
Por.t <- Por[-i,]
Por.lineal.forward <- lm(G3~absences+failures+G1+G2+reason+Mjob+sex+traveltime,data=Por.t)
Por.lineal.backward <- lm(G3~failures+G1+G2+reason+school+sex+traveltime,data=Por.t)
Por.lineal.stepwise <- lm(G3~failures+G1+G2+Mjob+reason+sex+traveltime,data=Por.t)
Por.pred.forward <- predict(Por.lineal.forward, newdata = Por.t)
Por.pred.backward <- predict(Por.lineal.backward, newdata = Por.t)
Por.pred.stepwise <- predict(Por.lineal.stepwise, newdata = Por.t)
errores.cv.Por[i,] <- c(error_prediccion(Por.pred.forward,Por.t),
error_prediccion(Por.pred.backward,Por.t),
error_prediccion(Por.pred.stepwise,Por.t))
}
errores.cv.Por <- apply(errores.cv.Por, 2, mean)
errores.cv.Por
df.errores.cv <- data.frame(Error=c(errores.cv.Math,errores.cv.Por),
Dataset=c('Matematica','Matematica','Matematica',
'Portugues','Portugues','Portugues'),
Metodo=c('Forward','Backward','Stepwise',
'Forward','Backward','Stepwise'))
colourCount = nrow(df.errores.cv)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# Plot
g11 <- ggplot(data = df.errores.cv, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g11 + mynamesthemev2 + labs( title= "Metodo Stepwise - CV",
y="Error",
x = "Datasets"))
#_____________ Matematica
error_prediccion <- function(predicciones, dataset){
# for (i in 1:length(predicciones)) {
#   if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
#     predicciones[i] <- floor(predicciones[i])
#   }
#   else
#     predicciones[i] <- ceiling(predicciones[i])
# }
mse <- mean((dataset$G3 - predicciones)^2)
return(mse)
}
errores.cv.Math <- matrix(0, nrow=nrow(Math), ncol=3)
colnames(errores.cv.Math) <- c('forward','backward','hybrid')
for(i in 1:nrow(Math)){
Math.t <- Math[-i,]
Math.lineal.forward <- lm(G3~absences+activities+age+famrel+Fjob+G1+G2,data=Math.t)
Math.lineal.backward <- lm(G3~absences+activities+age+famrel+G1+G2,data=Math.t)
Math.lineal.hybrid <- lm(G3~absences+activities+age+famrel+Fjob+G1+G2+Walc,data=Math.t)
Math.pred.forward <- predict(Math.lineal.forward, newdata = Math.t)
Math.pred.backward <- predict(Math.lineal.backward, newdata = Math.t)
Math.pred.hybrid <- predict(Math.lineal.hybrid, newdata = Math.t)
errores.cv.Math[i,] <- c(error_prediccion(Math.pred.forward,Math.t),
error_prediccion(Math.pred.backward,Math.t),
error_prediccion(Math.pred.hybrid,Math.t))
}
errores.cv.Math <- apply(errores.cv.Math, 2, mean)
errores.cv.Math
#_____________ Portugues
error_prediccion <- function(predicciones, dataset){
# for (i in 1:length(predicciones)) {
#   if ((predicciones[i]-trunc(predicciones[i])) <= 0.5) {
#     predicciones[i] <- floor(predicciones[i])
#   }
#   else
#     predicciones[i] <- ceiling(predicciones[i])
# }
mse <- mean((dataset$G3 - predicciones)^2)
return(mse)
}
errores.cv.Por <- matrix(0, nrow=nrow(Por), ncol=3)
colnames(errores.cv.Por) <- c('forward','backward','hybrid')
for(i in 1:nrow(Por)){
Por.t <- Por[-i,]
Por.lineal.forward <- lm(G3~absences+failures+G1+G2+reason+Mjob+sex+traveltime,data=Por.t)
Por.lineal.backward <- lm(G3~failures+G1+G2+reason+school+sex+traveltime,data=Por.t)
Por.lineal.hybrid <- lm(G3~failures+G1+G2+Mjob+reason+sex+traveltime,data=Por.t)
Por.pred.forward <- predict(Por.lineal.forward, newdata = Por.t)
Por.pred.backward <- predict(Por.lineal.backward, newdata = Por.t)
Por.pred.hybrid <- predict(Por.lineal.hybrid, newdata = Por.t)
errores.cv.Por[i,] <- c(error_prediccion(Por.pred.forward,Por.t),
error_prediccion(Por.pred.backward,Por.t),
error_prediccion(Por.pred.hybrid,Por.t))
}
errores.cv.Por <- apply(errores.cv.Por, 2, mean)
errores.cv.Por
#______________ Graficos
df.errores.cv <- data.frame(Error=c(errores.cv.Math,errores.cv.Por),
Dataset=c('Matematica','Matematica','Matematica',
'Portugues','Portugues','Portugues'),
Metodo=c('Forward','Backward','Hybrid',
'Forward','Backward','Hybrid'))
colourCount = nrow(df.errores.cv)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# Plot
g11 <- ggplot(data = df.errores.cv, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g11 + mynamesthemev2 + labs( title= "Errores - Seleccion Stepwise - CV",
y="Error",
x = "Datasets"))
print(g11 + mynamesthemev2 + labs( title= "Errores CV - Seleccion Stepwise",
y="Error",
x = "Datasets"))
lasso.modelo <- glmnet( x= x_train, y= y_train, alpha=1,
nlambda= 100,standardize = TRUE)
coefpath(lasso_mdl)
regularizacion <- lasso.modelo$beta %>%
as.matrix() %>%
t() %>%
as_tibble() %>%
mutate(lambda = lasso.modelo$lambda)
regularizacion <- regularizacion %>%
pivot_longer(
cols = !lambda,
names_to = "predictor",
values_to = "coeficientes"
)
g10 <- regularizacion %>%
ggplot(aes(x = lambda, y = coeficientes, color = predictor)) +
geom_line(size=1) +
geom_vline(xintercept = cv_output$lambda.min)+
scale_x_log10(
#breaks = trans_breaks("log10", function(x) 10^x),
#labels = trans_format("log10", math_format(10^.x))
) +
theme_light()+
theme_minimal()
lasso.modelo <- glmnet( x= x_train, y= y_train, alpha=1,
nlambda= 100,standardize = TRUE)
coefpath(lasso_mdl)
cv_output$lambda.min
log(cv_output$lambda.min)
coef(lasso_modelo)
g10 <- regularizacion %>%
ggplot(aes(x = lambda, y = coeficientes, color = predictor)) +
geom_line(size=1) +
geom_vline(xintercept = cv_output$lambda.min)+
scale_x_log10(
#breaks = trans_breaks("log10", function(x) 10^x),
#labels = trans_format("log10", math_format(10^.x))
) +
theme_light()+
theme_minimal()
print(g10 + mynamesthemev2 + labs( title= "Coeficientes del modelo en función de la regularización",
y="Coeficientes",
x = "Lambda"))
plot(lasso.modelo)
plot(cv_output)
min(cv_output$cvm)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
coef(cv_output, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
library(dplyr)
coef(cv_output, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
tidy()
?tidy()
?tidy
library(dplyr)
coef(cv_output, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
library(broom)
coef(cv_output, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
coef(lasso.modelo, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
coef(lasso.modelo, s = "lambda.1se") %>%
tidy() %>%
filter(row != "(Intercept)") %>%
ggplot(aes(value, reorder(row, value), color = value > 0)) +
geom_point(show.legend = FALSE) +
ggtitle("Influential variables") +
xlab("Coefficient") +
ylab(NULL)
coefplot(lasso.modelo, lambda=cv_output$lambda.min, sort="magnitude")
coef(lasso.modelo)
coef(lasso_modelo)
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
train = subset(Por, sample == TRUE)
test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = train)[, -1]
y_train <- train$G3
x_test <- model.matrix(G3~., data = test)[, -1]
y_test <- test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10, type.measure = "mse", standardize = TRUE)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
best_lam <- cv_output$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = best_lam,
standardize = TRUE)
predicciones_train <- predict(lasso_modelo, newx = x_train)
training_mse <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", training_mse)
predicciones_test <- predict(lasso_modelo, newx = x_test)
test_mse_lasso <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", test_mse_lasso)
#________ Matematica
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = train)[, -1]
y_train <- train$G3
x_test <- model.matrix(G3~., data = test)[, -1]
y_test <- test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10, type.measure = "mse", standardize = TRUE)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
best_lam <- cv_output$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = best_lam,
standardize = TRUE)
predicciones_train <- predict(lasso_modelo, newx = x_train)
Math_training_mse <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Math_training_mse)
predicciones_test <- predict(lasso_modelo, newx = x_test)
Math_test_mse <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Math_test_mse)
rss <- sum((Lasso.pred - Math.Y.test) ^ 2)
tss <- sum((Lasso.pred - mean(Lasso.pred)) ^ 2)
rsq <- 1 - rss/tss
rsq
#________ Portugues
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
Por.train = subset(Por, sample == TRUE)
Por.test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = Por.train)[, -1]
y_train <- Por.train$G3
x_test <- model.matrix(G3~., data = Por.test)[, -1]
y_test <- Por.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10, type.measure = "mse", standardize = TRUE)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
best_lam <- cv_output$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = best_lam,
standardize = TRUE)
predicciones_train <- predict(lasso_modelo, newx = x_train)
Por_training_mse <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Por_training_mse)
predicciones_test <- predict(lasso_modelo, newx = x_test)
Por_test_mse <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Por_test_mse)
#____________ Grafico de Errores
df.errores <- data.frame(Error=c(error.Math,Math_test_mse,
error.Por,Por_test_mse),
Dataset=c('Matematica','Matematica','Matematica','Matematica',
'Portugues','Portugues','Portugues','Portugues'),
Metodo=c('Forward','Backward','Hybrid','Lasso',
'Forward','Backward','Hybrid','Lasso'))
colourCount = nrow(df.errores)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
paste("Error (mse) de test:", Math_test_mse)
#________ Matematica
set.seed(123)
sample = sample.split(Math, SplitRatio = 0.80)
Math.train = subset(Math, sample == TRUE)
Math.test = subset(Math, sample == FALSE)
x_train <- model.matrix(G3~., data = Math.train)[, -1]
y_train <- Math.train$G3
x_test <- model.matrix(G3~., data = Math.test)[, -1]
y_test <- Math.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10, type.measure = "mse", standardize = TRUE)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
best_lam <- cv_output$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = best_lam,
standardize = TRUE)
predicciones_train <- predict(lasso_modelo, newx = x_train)
Math_training_mse <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Math_training_mse)
predicciones_test <- predict(lasso_modelo, newx = x_test)
Math_test_mse <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Math_test_mse)
rss <- sum((Lasso.pred - Math.Y.test) ^ 2)
tss <- sum((Lasso.pred - mean(Lasso.pred)) ^ 2)
rsq <- 1 - rss/tss
rsq
#________ Portugues
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
Por.train = subset(Por, sample == TRUE)
Por.test = subset(Por, sample == FALSE)
x_train <- model.matrix(G3~., data = Por.train)[, -1]
y_train <- Por.train$G3
x_test <- model.matrix(G3~., data = Por.test)[, -1]
y_test <- Por.test$G3
cv_output <- cv.glmnet(x_train, y_train, alpha = 1, nfolds = 10, type.measure = "mse", standardize = TRUE)
#Valor Minimo de MSE
min(cv_output$cvm)
#Valor Minimo de lambda
cv_output$lambda.min
# 1 st.error of min MSE
cv_output$cvm[cv_output$lambda == cv_output$lambda.1se]
# lambda for this MSE
cv_output$lambda.1se
best_lam <- cv_output$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = best_lam,
standardize = TRUE)
predicciones_train <- predict(lasso_modelo, newx = x_train)
Por_training_mse <- mean((predicciones_train - y_train)^2)
paste("Error (mse) de entrenamiento:", Por_training_mse)
predicciones_test <- predict(lasso_modelo, newx = x_test)
Por_test_mse <- mean((predicciones_test - y_test)^2)
paste("Error (mse) de test:", Por_test_mse)
#____________ Grafico de Errores
df.errores <- data.frame(Error=c(error.Math,Math_test_mse,
error.Por,Por_test_mse),
Dataset=c('Matematica','Matematica','Matematica','Matematica',
'Portugues','Portugues','Portugues','Portugues'),
Metodo=c('Forward','Backward','Hybrid','Lasso',
'Forward','Backward','Hybrid','Lasso'))
colourCount = nrow(df.errores)
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = position_dodge2(preserve = "single"))+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
=
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_manual(values = getPalette(colourCount))+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_brewer("Set1")+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_brewer("Set1")+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
?scale_fill_brewer
# Plot
g12 <- ggplot(data = df.errores, mapping = aes(x = Dataset, y = Error, fill = Metodo)) +
geom_bar(stat = "identity",position = "dodge")+
scale_fill_brewer(palette = "Set1")+
theme_light()+
theme_minimal()
print(g12 + mynamesthemev2 + labs( title= "Errores - Stepwise y Lasso",
y="Error",
x = "Datasets"))
