library(glmnet)
library(caTools)
load("E:/Bruno/Favaloro/4 AÃ±o/2do Cuatrimestre/ICD/ProyectoFinal/Student-ICD/environment.RData")
library(glmnet)
library(caTools)
set.seed(123)
sample = sample.split(Por, SplitRatio = 0.80)
train = subset(Por, sample == TRUE)
test = subset(Por, sample == FALSE)
x.train <- model.matrix(G3~., data = train)[, -1]
y.train <- train$G3
x.test <- model.matrix(G3~., data = test)[, -1]
y.test <- test$G3
# Ridge
Ridge.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 0, family = 'gaussian')
# Auntomaticamente es un k-fold de k = 10
# mse = mean square error. Si fueran categoricas podria 'devians'
# Gaussial = regresion lineal, si fuera categorica pongo binomial
Ridge.pred <- predict(Ridge.fit, s = Ridge.fit$lambda.1se, newx = x.test)
# lambda.1se es el valor de lambda con el modelo mas simple. Lambda.min es la suma minima
# El resultado es igual pero te da menos variables con 1se
Ridge.result <- cbind(test$G3, round(Ridge.pred))
em.ridge <- mean(sqrt((y.test - round(Ridge.pred))^2)*5)
em.ridge
# Lasso
Lasso.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 1, family = 'gaussian')
Lasso.pred.1se <- predict(Lasso.fit, s = Lasso.fit$lambda.1se, newx = x.test)
Lasso.pred.min <- predict(Lasso.fit, s = Lasso.fit$lambda.min, newx = x.test)
mse.lasso.min <- mean((y.test - Lasso.pred.min)^2)
mse.lasso.1se <- mean((y.test - Lasso.pred.1se)^2)
mse.lasso.min
mse.lasso.1se
# Elastic Net
EN.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 0.5, family = 'gaussian')
# Lasso
Lasso.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 1, family = 'gaussian', kfold = 5)
Lasso.pred.1se <- predict(Lasso.fit, s = Lasso.fit$lambda.1se, newx = x.test)
Lasso.pred.min <- predict(Lasso.fit, s = Lasso.fit$lambda.min, newx = x.test)
mse.lasso.min <- mean((y.test - Lasso.pred.min)^2)
mse.lasso.1se <- mean((y.test - Lasso.pred.1se)^2)
mse.lasso.min
mse.lasso.1se
Lasso.fit$lambda.1se
Lasso.pred.min <- predict(Lasso.fit, s = Lasso.fit$lambda.min, newx = x.test)
Lasso.fit$lambda.min
lasso_modelo <- glmnet(x_train, y_train,
alpha = 1, lambda = Lasso.fit$lambda.1se)
Lasso.pred.1se <- predict(lasso_modelo, newx = x.test)
mse.lasso.1se <- mean((y.test - Lasso.pred.1se)^2)
mse.lasso.1se
Lasso.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 1, family = 'gaussian', kfold = 5)
lasso_modelo_1se <- glmnet(x_train, y_train,
alpha = 1, lambda = Lasso.fit$lambda.1se)
lasso_modelo_min <- glmnet(x_train, y_train,
alpha = 1, lambda = Lasso.fit$lambda.min)
Lasso.pred.1se <- predict(lasso_modelo_1se, newx = x.test)
Lasso.pred.min <- predict(lasso_modelo_min, newx = x.test)
mse.lasso.min <- mean((y.test - Lasso.pred.min)^2)
mse.lasso.1se <- mean((y.test - Lasso.pred.1se)^2)
mse.lasso.min
mse.lasso.1se
Lasso.fit <- cv.glmnet(x.train, y.train, type.measure = 'mse',
alpha = 1, family = 'gaussian', kfold = 10)
lasso_modelo_1se <- glmnet(x_train, y_train,
alpha = 1, lambda = Lasso.fit$lambda.1se)
lasso_modelo_min <- glmnet(x_train, y_train,
alpha = 1, lambda = Lasso.fit$lambda.min)
Lasso.pred.1se <- predict(lasso_modelo_1se, newx = x.test)
Lasso.pred.min <- predict(lasso_modelo_min, newx = x.test)
mse.lasso.min <- mean((y.test - Lasso.pred.min)^2)
mse.lasso.1se <- mean((y.test - Lasso.pred.1se)^2)
Lasso.fit$lambda.min
mse.lasso.min
Lasso.fit$lambda.1se
mse.lasso.1se
